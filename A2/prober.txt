#!/usr/bin/python
import easysnmp
import sys;
import time;
import math;
from easysnmp import Session;
from math import pow;
info=(sys.argv[1]).split(':');

oid=['1.3.6.1.2.1.1.3.0']
countern=[]
countern2=[]
rate=[]
nrate=[]
countert=[]
time2=0
timex=0
s=0
x=0
z=1
time_x=0
time_start=0
n=int(sys.argv[3])
t_s=(1/float(sys.argv[2]))

for i in range (4,len(sys.argv)):
	oid.append(sys.argv[i])

def prober():
	
	global countern,countern2,counter,countert,timex,time1,s,time_x,k,time_start,f
	f=0
	for i in range (0,n+1):
		time_i=time.time()
		if(i==0):
			time_start=time_i
		if(len(countern)!=0):
			countern2=[]
			countern2=countern;
			time2=time1;
		counter=[]
		t1=time.time()
		try:
			session=Session(hostname=info[0],remote_port=info[1],community=info[2],version=2,timeout=2,retries=0);
			counter=(session.get(oid));
		except easysnmp.exceptions.EasySNMPTimeoutError:
			continue
		time1=(time.time())-(t1-time_i);
		countern=[]
		countert=[]
		for t in range(0,len(oid)):
			if counter[t].value != 'NOSUCHOBJECT' and counter[t].value != 'NOSUCHINSTANCE':
				countern.append(int(counter[t].value)) 
				countert.append(str(counter[t].snmp_type))
		#print int(counter[0].value)
		#print int(timex)
		if (int(counter[0].value)<int(timex)):
			print "restarted"
			countern=[]
			countern2=[]
			rate=[]
			nrate=[]
			countert=[]
			time2=0
			timex=0
			prober()	
		timex=counter[0].value;
		if len(countern2)>1 :
			rate=[]
			rate.insert(0,int(time2))
			for k in range(1,len(countern)):
				sub=countern[k]-countern2[k]
				if sub<0:
					if countert[k]=='COUNTER':
						sub=sub+2**32
					elif countert[k]=='COUNTER64':
						sub=sub+2**64		
		 		rate.append(int((sub)/round((countern[0]*pow(10,-2)-countern2[0]*pow(10,-2)),1)))
				for j  in range(0,len(rate)):
					print rate[j],
					print "|",
					
				print ""
				s+=1
				if(s==n):
					sys.exit()
	
		time_f=time.time()
        	time_total=time_f-time_i
		x=math.ceil((time_f-time_start)/t_s)	
		if(time_total<t_s):
			y=(time_start+(x*t_s))-time_f
		
			time.sleep(y)
		else:
		
			time.sleep((time_start+(x+1)*t_s)-time_f)
		
			k=0;
def infinite():
    i = 0
    while True:
        yield i
        i += 1
def prober2():
	
	global countern,countern2,counter,countert,timex,time1,s,time_x,k,time_start,z
	f=0
	for i in infinite():
		time_i=time.time()
		if(i==0):
			time_start=time_i
		if(len(countern)!=0):
			countern2=[]
			countern2=countern;
			time2=time1;
		counter=[]
		t1=time.time()
		try:
			session=Session(hostname=info[0],remote_port=info[1],community=info[2],version=2,timeout=2,retries=0);
			counter=(session.get(oid));
		except easysnmp.exceptions.EasySNMPTimeoutError:
			continue
		time1=(time.time())-(t1-time_i);
		countern=[]
		countert=[]
		for t in range(0,len(oid)):
			if counter[t].value != 'NOSUCHOBJECT' and counter[t].value != 'NOSUCHINSTANCE':
				countern.append(int(counter[t].value)) 
				countert.append(str(counter[t].snmp_type))
		#print int(counter[0].value)
		#print int(timex)
		if (int(counter[0].value)<int(timex)):
			print "restarted"
			countern=[]
			countern2=[]
			rate=[]
			nrate=[]
			countert=[]
			time2=0
			timex=0
			prober2()	
		timex=counter[0].value;
		if len(countern2)>1 :
			rate=[]
			rate.insert(0,int(time2))
			for k in range(1,len(countern)):
				sub=countern[k]-countern2[k]
				if sub<0:
					if countert[k]=='COUNTER':
						sub=sub+2**32
					elif countert[k]=='COUNTER64':
						sub=sub+2**64		
		 		rate.append(int((sub)/round((countern[0]*pow(10,-2)-countern2[0]*pow(10,-2)),1)))
				for j  in range(0,len(rate)):
					print rate[j],
					print "|",
					
				print ""
				s+=1
				if(s==n):
					sys.exit()
	
		time_f=time.time()
        	time_total=time_f-time_i
		x=math.ceil((time_f-time_start)/t_s)	
		if(time_total<t_s):
			y=(time_start+(x*t_s))-time_f
		
			time.sleep(y)
		else:
		
			time.sleep((time_start+(x+1)*t_s)-time_f)
		
			k=0;




if n!= -1:
	prober()
		
else:
	
	prober2()

	



